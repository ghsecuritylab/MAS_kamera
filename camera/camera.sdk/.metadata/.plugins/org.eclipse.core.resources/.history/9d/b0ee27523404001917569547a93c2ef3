
#include "xparameters.h"
#include "xiicps.h"
#include "xil_printf.h"
#include <stdio.h>
#include "sleep.h"
#include "xgpio.h"

#define IIC_ADDRESS            0x21


int I2C_write(u8 register_offset, u8 write_value);
int I2C_read(u8 register_offset, u8 *read_value);

XIicPs Iic;
#define CAMERA_DEVICE_ID  XPAR_GPIO_1_DEVICE_ID



XGpio Gpio;
XGpio Gpio2;

int main()
{
	u8 LuxHighByte=0;

	XIicPs_Config *Config;
	int Status;
	u32 InputData;

	Status = XGpio_Initialize(&Gpio, CAMERA_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(&Gpio, 1, 0x7ff);

	Status = XGpio_Initialize(&Gpio2, 0);
	if (Status != XST_SUCCESS) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(&Gpio2, 2, 0x0);
	XGpio_SetDataDirection(&Gpio2, 1, 0xf);
	XGpio_DiscreteSet(&Gpio2, 2, 0xf);



	Config = XIicPs_LookupConfig(XPAR_XIICPS_0_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XIicPs_SelfTest(&Iic);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XIicPs_SetSClk(&Iic, 100000);

	printf("PS I2C Initialized\n\r");

	int status = I2C_read(0x1c, &LuxHighByte);
	if (status == XST_SUCCESS) {
		printf("succ ");
		printf("%x\n", LuxHighByte);
	} else
		printf("fail\n\r");

	usleep(100000);
	status = I2C_read(0x1d, &LuxHighByte);
	if (status == XST_SUCCESS) {
		printf("succ ");
		printf("%x\n", LuxHighByte);
	} else
		printf("fail\n\r");

	status = I2C_write( 0x12, 0x80);
	if (status == XST_SUCCESS)
		printf("succ\n\r");
	else
		printf("fail\n\r");

	/*usleep(100000);
	status = I2C_write( 0x70, 0x4a);
	if (status == XST_SUCCESS)
		printf("succ\n\r");
	else
		printf("fail\n\r");

	usleep(100000);
	status = I2C_write( 0x71, 0xb5);
	if (status == XST_SUCCESS)
		printf("succ\n\r");
	else
		printf("fail\n\r");
*/
	status = I2C_write( 0xff, 0xff);
		if (status == XST_SUCCESS)
			printf("succ\n\r");
		else
			printf("fail\n\r");

	status = I2C_read( 0x70, &LuxHighByte);
	if (status == XST_SUCCESS) {
		printf("succ ");
		printf("%x\n", LuxHighByte);
	} else
		printf("fail\n\r");

	usleep(100000);

	status = I2C_read( 0x71, &LuxHighByte);
	if (status == XST_SUCCESS) {
		printf("succ ");
		printf("%x\n", LuxHighByte);
	} else
		printf("fail\n\r");

	usleep(100000);
	u8 data;
	u8 clk;
	u32 ar[1000];
	/*for(int i=0;i<1000;i++){
		ar[i]=XGpio_DiscreteRead(&Gpio,1);
	}*/
    while(1){
    	InputData=XGpio_DiscreteRead(&Gpio,1);
    	data=InputData&0xff;
    	clk= (InputData>>8)&0x7;
    	if((InputData & 0x200)){
    		printf("%x %d %ld\n",clk,data,InputData);
    	}

    	usleep(100000);
    }


    printf("Testing Complete\n\r");


    return 0;
}

int I2C_write(u8 register_offset, u8 write_value)

{
	int Status = XST_SUCCESS;
	u8 TxBuffer[128]; // Only need this to be size 2, but making larger for future use

	TxBuffer[0] = register_offset;  // Offset of register to write
	TxBuffer[1] = write_value;  // value to write there

	Status = XIicPs_MasterSendPolled(&Iic, TxBuffer, 2, IIC_ADDRESS);
	if (Status != XST_SUCCESS) return XST_FAILURE;

	while (XIicPs_BusIsBusy(&Iic));

	return(Status);
}

int I2C_read(u8 register_offset, u8 *read_value)

{
	int Status = XST_SUCCESS;
	u8 TxBuffer[128];
	u8 RxBuffer[128];

	TxBuffer[0] = register_offset;

	Status = XIicPs_MasterSendPolled(&Iic, TxBuffer, 1, IIC_ADDRESS);
	if (Status != XST_SUCCESS) return XST_FAILURE;
	//Wait until bus is idle to start another transfer.
	while (XIicPs_BusIsBusy(&Iic)) {/* NOP */}


	Status = XIicPs_MasterRecvPolled(&Iic, RxBuffer, 1, IIC_ADDRESS);
	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	if(Status==XST_SUCCESS)
		*read_value = RxBuffer[0];

	//usleep(100000); // Delay 100 ms, which is 100K us
	while (XIicPs_BusIsBusy(&Iic));
	return(Status);
}
