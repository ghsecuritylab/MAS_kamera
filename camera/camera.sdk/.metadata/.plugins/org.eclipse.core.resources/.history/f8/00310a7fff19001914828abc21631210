/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

#include <stdio.h>
#include <string.h>
#include "ff.h"
#include "sleep.h"

#include "lwip/err.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif
#include "xstatus.h"
#include "bsp/camera.h"
#include "bsp/iic.h"
#include "bsp/jpeg_encoder.h"
#include "platform.h"
#include "platform_config.h"


int transfer_data() {

	return 0;
}


void print_app_header()
{
#if (LWIP_IPV6==0)
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
#else
	xil_printf("\n\r\n\r-----lwIPv6 TCP echo server ------\n\r");
#endif
	xil_printf("TCP packets sent to port 6001 will be echoed back\n\r");
}
char *SD_File;

#define BUFFER_SIZE 2048
int buf_el;
int size;
u8 img[3*640*480] __attribute__ ((aligned(32))) = {0};

err_t recv_callback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
	FIL f;
	char pic[32] = "photo.jpg";
	char er[] = "";
	UINT bytes_read;
	int size_to_send;

	if (p != NULL) {
		platform_stop_interrupts();
		//take_photo_(img);
		//TakeJPG_(img);
		//asm(" cpsid  I");
		if (take_photo() != XST_SUCCESS) {
			printf("Failed to take image.\n");
			tcp_write(tpcb, (void*) er, sizeof(er), 1);
			return ERR_OK;
		}

		if (TakeJPG() != XST_SUCCESS) {
			printf("Failed to encode image.\n");
			tcp_write(tpcb, (void*) er, sizeof(er), 1);
			return ERR_OK;
		}
		platform_enable_interrupts();
		//asm(" cpsid  F");
	}
	SD_File = (char *) pic;
	f_open(&f, pic, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
	size = file_size(&f);

	f_read(&f, (void *) img, size, &bytes_read);
	printf("%d \r\n", size);
	//printf("%s\r\n", (char*) p->payload);

	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	if (buf_el >= size) {
		tcp_write(tpcb, (void*) er, 0, 1);
		//tcp_close(tpcb);
		buf_el = 0;
		return ERR_OK;
	}
	if (buf_el + BUFFER_SIZE >= size) {
		size_to_send = size - buf_el;
	} else {
		size_to_send = BUFFER_SIZE;
	}

	tcp_write(tpcb, (void*) (img + buf_el), size_to_send, 0);
	tcp_output(tpcb);
	buf_el += size_to_send;

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

err_t sent_callback(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
	int32_t sizeToSend;


	if (buf_el >= size) {
		tcp_close(tpcb);
		buf_el=0;
		size=0;
		xil_printf("Done sending JPEG\n");
		return ERR_OK;
	}

	if (buf_el + BUFFER_SIZE >= size) { // size left to send is less than whole buffer
		sizeToSend = size - buf_el;
	} else {
		sizeToSend = BUFFER_SIZE; // sending whole buffer
	}

	//fill_buffer(buffer.buf, os->stream, buffer.offset, sizeToSend);

	tcp_write(tpcb, (void*) (img+buf_el), sizeToSend, 0);

	buf_el += sizeToSend;

	return ERR_OK;
}


err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);

	tcp_sent(newpcb, sent_callback);

	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection);

	/* increment for subsequent accepted connections */
	connection++;

	return ERR_OK;
}


int start_application()
{
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	/* create new TCP PCB structure */
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP echo server started @ port %d\n\r", port);

	return 0;
}
